ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  springProfiles = System.getProperty('spring.profiles.active', "test,local")
  repackage = System.getProperty('springBoot.repackage', "false")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
  systemProperty('spring.profiles.active', project.springProfiles)
}

apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

repositories {
  maven {
    url 'https://repo.spring.io/libs-snapshot'
  }
}

dependencies {
  compile project(":gate-manual")
  compile project(":gate-core")

  spinnaker.group('retrofitDefault')
  spinnaker.group("test")
  compile spinnaker.dependency("kork")
  compile spinnaker.dependency("korkStackdriver")
  compile spinnaker.dependency("korkSwagger")
  compile spinnaker.dependency("korkWeb")
  compile spinnaker.dependency("frigga")
  compile spinnaker.dependency('cglib')
  compile "com.netflix.spinnaker.fiat:fiat-api:0.17.0"

  compile('com.github.kstyrc:embedded-redis:0.6')
  compile('org.springframework.session:spring-session-data-redis:1.1.1.RELEASE')
  compile("org.springframework.cloud:spring-cloud-security:1.0.3.RELEASE")
  compile('org.opensaml:opensaml:2.6.4')
  compile("com.google.api-client:google-api-client:1.21.0")
  compile("com.google.apis:google-api-services-admin-directory:directory_v1-rev65-1.21.0")
  compile("org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE")
  compile("org.springframework.security.extensions:spring-security-saml-dsl:1.0.0.M3") {
    exclude group: 'org.springframework.boot'
    exclude group: 'org.springframework.security'
  }

  compile 'com.squareup.retrofit:converter-simplexml:1.9.0'
  testCompile "com.squareup.okhttp:mockwebserver:${spinnaker.version('okHttp')}"

  //this brings in the jetty GzipFilter which boot will autoconfigure
  runtime 'org.eclipse.jetty:jetty-servlets:9.2.11.v20150529'
}

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
  exclude group: "org.springframework.boot", module: "spring-boot-starter-data-rest"
}

applicationName = 'gate'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
  into 'config'
}

startScripts {
  defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
        if [ -f /etc/default/spinnaker ]; then
          set -a
          . /etc/default/spinnaker
          set +a
        fi
        DEFAULT_JVM_OPTS='''.stripIndent())
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = "spinnaker-" + project.applicationName
  version = toVers(project.version.toString())
  release '3'
  into "/opt/${project.applicationName}"
  from "${project.buildDir}/install/${project.applicationName}"

  // installer scripts
  postInstall = file('pkg_scripts/postInstall.sh')
  postUninstall = file('pkg_scripts/postUninstall.sh')

  from(file('etc/init/gate.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('etc/logrotate.d/gate')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileMode = 0644
    fileType = CONFIG | NOREPLACE
  }

}

buildDeb {
  dependsOn installDist
}

buildRpm {
  arch = NOARCH
  os = LINUX
  dependsOn installDist
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  classpath configurations.runtime + file('config')
}

tasks.bootRepackage.enabled = project.repackage
